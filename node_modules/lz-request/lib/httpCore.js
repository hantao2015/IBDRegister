"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Request 类
var Request = // 基地址
// 请求头
// 选项（axios 接收的）
// 是否设置了请求拦截
// 是否设置了响应拦截
function Request() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _classCallCheck(this, Request);

  _defineProperty(this, "getMethod", function (method) {
    return _this.method || method;
  });

  _defineProperty(this, "getBaseURL", function (baseURL) {
    return _this.baseURL || baseURL || Request.baseURL;
  });

  _defineProperty(this, "getUrl", function (url) {
    return _this.url || url;
  });

  _defineProperty(this, "getHeaders", function () {
    var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _objectSpread({}, Request.headers, headers, _this.headers);
  });

  _defineProperty(this, "getDealParams", function (dealParams) {
    return _this.dealParams || dealParams;
  });

  this.method = options.method;
  this.baseURL = options.baseURL;
  this.url = options.url;
  this.headers = _objectSpread({}, options.header);
  this.dealParams = options.dealParams;
};

_defineProperty(Request, "baseURL", '');

_defineProperty(Request, "headers", {
  'Content-Type': 'application/json'
});

_defineProperty(Request, "options", {});

_defineProperty(Request, "hasSetRequestInterceptors", false);

_defineProperty(Request, "hasSetRequestInterceptors", false);

var httpCore = function httpCore(options) {
  return new Request(options);
}; // 设置默认的基地址


httpCore.setDefaultBaseURL = function (baseURL) {
  Request.baseURL = baseURL;
}; // 设置默认的请求头


httpCore.setDefaultHeaders = function (headers) {
  Request.headers = _objectSpread({}, Request.headers, headers);
}; // 设置默认的 options（axios 接收的 options）


httpCore.setDefaultOptions = function (options) {
  Request.options = _objectSpread({}, options);
};
/**
 * 设置请求拦截
 * @param {function} dealConfig 处理 config 且返回 config 的函数
 * @param {function} dealError 处理 error 且返回 error 的函数
 */


httpCore.setRequestInterceptors = function () {
  var dealConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (config) {
    return config;
  };
  var dealError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (error) {
    return error;
  };

  if (httpCore.hasSetRequestInterceptors) {
    return;
  }

  httpCore.hasSetRequestInterceptors = true;

  _axios.default.interceptors.request.use(function (config) {
    config = dealConfig && dealConfig(config);
    return config;
  }, function (error) {
    error = dealError && dealError(dealError);
    return Promise.reject(error);
  });
};
/**
 * 设置响应拦截
 * @param {function} dealReponse 处理 response 且返回 response 的函数
 * @param {function} dealError 处理 error 且返回 error 的函数
 */


httpCore.setResponseInterceptors = function () {
  var dealReponse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (response) {
    return response;
  };
  var dealError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (error) {
    return error;
  };

  if (httpCore.hasSetResponseInterceptors) {
    return;
  }

  httpCore.hasSetResponseInterceptors = true;

  _axios.default.interceptors.response.use(function (response) {
    response = dealReponse && dealReponse(response);
    return response;
  }, function (error) {
    error = dealError && dealError(error);
    return Promise.reject(error);
  });
};
/**
 * 创建 api
 * @param {string} apiName 接口名称（如：getTable）
 * @param {object} options 接口所需的选项
 *
 * @param {string} options.method  api 请求方法：'get' | 'post'
 * @param {string} options.baseURL api 请求的基地址（如：'http://localhost:4000/'）
 * @param {string} options.url     api 请求的地址（如：'/api/100/Retrive'）
 * @param {object} options.headers api 请求的请求头（如：{ accessToken: 'xxx', userCode: 'demo1' }）
 *
 * @param {function} dealParams 处理 params 的函数（对传入的 params 进行处理，然后返回新的 params）
 */


httpCore.createApi = function (apiName, options, dealParams) {
  var _options = options;
  var _dealParams = dealParams;

  Request.prototype[apiName] = function (params) {
    // 默认使用 'get' 方法请求
    var method = this.getMethod(_options.method) || 'get';
    var baseURL = this.getBaseURL(_options.baseURL);
    var url = this.getUrl(_options.url);
    var headers = this.getHeaders(_options.headers);
    var dealParams = this.getDealParams(_dealParams);

    var options = _objectSpread({
      method: method,
      baseURL: baseURL,
      url: url,
      headers: headers
    }, Request.options);

    if (method === 'get') {
      options.params = dealParams ? dealParams(params) : params;
    } else if (method === 'post') {
      options.data = dealParams ? dealParams(params) : params;
    } else {
      throw Error("\u8BF7\u6C42\u65B9\u6CD5 ".concat(method, " \u9519\u8BEF\uFF1A\u8BF7\u4F7F\u7528 get \u6216 post \u8BF7\u6C42"));
    }

    return (0, _axios.default)(options);
  };
};

var _default = httpCore;
exports.default = _default;