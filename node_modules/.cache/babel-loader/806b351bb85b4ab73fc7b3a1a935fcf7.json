{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Request 类\n\n\nvar Request = // 基地址\n// 请求头\n// 选项（axios 接收的）\n// 是否设置了请求拦截\n// 是否设置了响应拦截\nfunction Request() {\n  var _this = this;\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _classCallCheck(this, Request);\n\n  _defineProperty(this, \"getMethod\", function (method) {\n    return _this.method || method;\n  });\n\n  _defineProperty(this, \"getBaseURL\", function (baseURL) {\n    return _this.baseURL || baseURL || Request.baseURL;\n  });\n\n  _defineProperty(this, \"getUrl\", function (url) {\n    return _this.url || url;\n  });\n\n  _defineProperty(this, \"getHeaders\", function () {\n    var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({}, Request.headers, headers, _this.headers);\n  });\n\n  _defineProperty(this, \"getDealParams\", function (dealParams) {\n    return _this.dealParams || dealParams;\n  });\n\n  this.method = options.method;\n  this.baseURL = options.baseURL;\n  this.url = options.url;\n  this.headers = _objectSpread({}, options.header);\n  this.dealParams = options.dealParams;\n};\n\n_defineProperty(Request, \"baseURL\", '');\n\n_defineProperty(Request, \"headers\", {\n  'Content-Type': 'application/json'\n});\n\n_defineProperty(Request, \"options\", {});\n\n_defineProperty(Request, \"hasSetRequestInterceptors\", false);\n\n_defineProperty(Request, \"hasSetRequestInterceptors\", false);\n\nvar httpCore = function httpCore(options) {\n  return new Request(options);\n}; // 设置默认的基地址\n\n\nhttpCore.setDefaultBaseURL = function (baseURL) {\n  Request.baseURL = baseURL;\n}; // 设置默认的请求头\n\n\nhttpCore.setDefaultHeaders = function (headers) {\n  Request.headers = _objectSpread({}, Request.headers, headers);\n}; // 设置默认的 options（axios 接收的 options）\n\n\nhttpCore.setDefaultOptions = function (options) {\n  Request.options = _objectSpread({}, options);\n};\n/**\n * 设置请求拦截\n * @param {function} dealConfig 处理 config 且返回 config 的函数\n * @param {function} dealError 处理 error 且返回 error 的函数\n */\n\n\nhttpCore.setRequestInterceptors = function () {\n  var dealConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (config) {\n    return config;\n  };\n  var dealError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (error) {\n    return error;\n  };\n\n  if (httpCore.hasSetRequestInterceptors) {\n    return;\n  }\n\n  httpCore.hasSetRequestInterceptors = true;\n\n  _axios.default.interceptors.request.use(function (config) {\n    config = dealConfig && dealConfig(config);\n    return config;\n  }, function (error) {\n    error = dealError && dealError(dealError);\n    return Promise.reject(error);\n  });\n};\n/**\n * 设置响应拦截\n * @param {function} dealReponse 处理 response 且返回 response 的函数\n * @param {function} dealError 处理 error 且返回 error 的函数\n */\n\n\nhttpCore.setResponseInterceptors = function () {\n  var dealReponse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (response) {\n    return response;\n  };\n  var dealError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (error) {\n    return error;\n  };\n\n  if (httpCore.hasSetResponseInterceptors) {\n    return;\n  }\n\n  httpCore.hasSetResponseInterceptors = true;\n\n  _axios.default.interceptors.response.use(function (response) {\n    response = dealReponse && dealReponse(response);\n    return response;\n  }, function (error) {\n    error = dealError && dealError(error);\n    return Promise.reject(error);\n  });\n};\n/**\n * 创建 api\n * @param {string} apiName 接口名称（如：getTable）\n * @param {object} options 接口所需的选项\n *\n * @param {string} options.method  api 请求方法：'get' | 'post'\n * @param {string} options.baseURL api 请求的基地址（如：'http://localhost:4000/'）\n * @param {string} options.url     api 请求的地址（如：'/api/100/Retrive'）\n * @param {object} options.headers api 请求的请求头（如：{ accessToken: 'xxx', userCode: 'demo1' }）\n *\n * @param {function} dealParams 处理 params 的函数（对传入的 params 进行处理，然后返回新的 params）\n */\n\n\nhttpCore.createApi = function (apiName, options, dealParams) {\n  var _options = options;\n  var _dealParams = dealParams;\n\n  Request.prototype[apiName] = function (params) {\n    // 默认使用 'get' 方法请求\n    var method = this.getMethod(_options.method) || 'get';\n    var baseURL = this.getBaseURL(_options.baseURL);\n    var url = this.getUrl(_options.url);\n    var headers = this.getHeaders(_options.headers);\n    var dealParams = this.getDealParams(_dealParams);\n\n    var options = _objectSpread({\n      method: method,\n      baseURL: baseURL,\n      url: url,\n      headers: headers\n    }, Request.options);\n\n    if (method === 'get') {\n      options.params = dealParams ? dealParams(params) : params;\n    } else if (method === 'post') {\n      options.data = dealParams ? dealParams(params) : params;\n    } else {\n      throw Error(\"\\u8BF7\\u6C42\\u65B9\\u6CD5 \".concat(method, \" \\u9519\\u8BEF\\uFF1A\\u8BF7\\u4F7F\\u7528 get \\u6216 post \\u8BF7\\u6C42\"));\n    }\n\n    return (0, _axios.default)(options);\n  };\n};\n\nvar _default = httpCore;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}