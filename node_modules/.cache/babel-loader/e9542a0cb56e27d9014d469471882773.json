{"ast":null,"code":"import _Spin from \"antd/es/spin\";\nimport _Modal from \"antd/es/modal\";\nimport _Form from \"antd/es/form\";\nimport _Input from \"antd/es/input\";\nimport _Table from \"antd/es/table\";\nimport _Button from \"antd/es/button\";\nimport _defineProperty from \"/Users/mac/Desktop/IBDRegister/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _message from \"antd/es/message\";\nimport _Divider from \"antd/es/divider\";\nvar _jsxFileName = \"/Users/mac/Desktop/IBDRegister/src/components/busniess/EditNotice/EditNotice.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport \"./EditNotice.less\";\nimport ApplyDataBase from \"../ApplyDataBase\";\nimport http from \"../../../utils/api\";\nimport TextArea from \"antd/lib/input/TextArea\";\nconst noticeId = \"620317621824\";\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\n\nconst columns = props => {\n  const onEdit = props.onEdit;\n  return [{\n    title: \"序号\",\n    dataIndex: \"name\",\n    key: \"name\"\n  }, {\n    title: \"标题\",\n    dataIndex: \"title\",\n    key: \"title\",\n    render: text => React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, text)\n  }, {\n    title: \"消息内容\",\n    dataIndex: \"content\",\n    key: \"content\"\n  }, {\n    title: \"发布者\",\n    dataIndex: \"doctor\",\n    key: \"doctor\"\n  }, {\n    title: \"文件\",\n    dataIndex: \"file\",\n    key: \"file\"\n  }, {\n    title: \"状态\",\n    dataIndex: \"status\",\n    key: \"status\"\n  }, {\n    title: \"操作\",\n    key: \"action\",\n    render: (text, record) => React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => {\n        console.log(\"re\", record);\n        onEdit(record);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"\\u4FEE\\u6539\"), React.createElement(_Divider, {\n      type: \"vertical\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"\\u53D1\\u5E03\"))\n  }];\n};\n\nclass EditNotice extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      record: {},\n      page: \"listPage\",\n      //当前页面\n      spin: false,\n      //是否显示加载\n      visible: false,\n      //是否显示添加模态框\n      editVisible: false //是否显示查看模态框\n\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        visible: false,\n        editVisible: false\n      });\n    };\n\n    this.save = async (e, type) => {\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          this.onSubmit(values, type);\n        }\n      });\n    };\n\n    this.onSubmit = async (values, type) => {\n      let res;\n\n      if (type === 1) {\n        let data = [values];\n\n        try {\n          res = await http().addRecords({\n            resid: noticeId,\n            data\n          });\n\n          if (res.data.data === 0) {\n            _message.success(\"添加成功\");\n\n            this.setState({\n              visible: false\n            });\n          }\n\n          await this.getData();\n        } catch (error) {\n          _message.error(error.message);\n        }\n      } else {\n        let data = [_objectSpread({}, values, {\n          REC_ID: this.state.record.REC_ID\n        })];\n\n        try {\n          res = await http().modifyRecords({\n            resid: noticeId,\n            data\n          });\n\n          if (res.data.error === 0) {\n            _message.success(\"修改成功\");\n\n            this.setState({\n              editVisible: false\n            });\n          }\n\n          await this.getData();\n        } catch (error) {\n          _message.error(error.message);\n        }\n      }\n    };\n\n    this.publish = () => {\n      this.setState({\n        page: \"listPage\"\n      });\n    };\n\n    this.renderContent = () => {\n      let page = this.state.page;\n\n      switch (page) {\n        case \"listPage\":\n          return this.renderListPage();\n\n        case \"addPage\":\n          return this.renderAddPage();\n\n        case \"checkPage\":\n          return this.renderCheckPage();\n      }\n    };\n\n    this.renderListPage = () => {\n      let data = this.state.data;\n      let _this$state = this.state,\n          spin = _this$state.spin,\n          record = _this$state.record;\n      const getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"div\", {\n        className: \"editNotice\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        className: \"editNotice-add\",\n        onClick: this.onAdd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"\\u6DFB\\u52A0\\u65B0\\u901A\\u77E5\"), React.createElement(_Spin, {\n        spinning: spin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(_Table, {\n        className: \"editNotice-table\",\n        columns: columns({\n          onEdit: record => {\n            this.onEdit(record);\n          }\n        }),\n        dataSource: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(_Modal, {\n        title: \"\\u6DFB\\u52A0\\u65B0\\u901A\\u77E5\",\n        visible: this.state.visible,\n        width: 700,\n        onOk: this.handleOk,\n        onCancel: this.handleCancel,\n        destroyOnClose: true,\n        footer: [React.createElement(_Button, {\n          key: \"back\",\n          onClick: this.handleCancel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, \"\\u53D6\\u6D88\"), React.createElement(_Button, {\n          key: \"submit\",\n          type: \"primary\",\n          onClick: () => {\n            this.save(1);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, \"\\u4FDD\\u5B58\"), React.createElement(_Button, {\n          key: \"submit\",\n          type: \"primary\",\n          onClick: this.publish,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, \"\\u53D1\\u5E03\")],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(_Form, Object.assign({}, formItemLayout, {\n        className: \"editNotice-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(_Form.Item, {\n        className: \"editNotice-form-item\",\n        label: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, \"\\u6807\\u9898\\xA0\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, getFieldDecorator(\"title\", {\n        rules: [{\n          required: true,\n          message: \"请输入标题\",\n          whitespace: true\n        }]\n      })(React.createElement(_Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        className: \"editNotice-form-item\",\n        label: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, \"\\u6D88\\u606F\\u5185\\u5BB9\\xA0\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, getFieldDecorator(\"content\", {\n        rules: [{\n          required: true,\n          message: \"请输入消息内容\",\n          whitespace: true\n        }]\n      })(React.createElement(TextArea, {\n        className: \"editNotice-form-item-textarea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }))))), React.createElement(_Modal, {\n        title: \"\\u4FEE\\u6539\\u901A\\u77E5\",\n        visible: this.state.editVisible,\n        width: 700,\n        onOk: this.handleOk,\n        onCancel: this.handleCancel,\n        destroyOnClose: true,\n        footer: [React.createElement(_Button, {\n          key: \"back\",\n          onClick: this.handleCancel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }, \"\\u53D6\\u6D88\"), React.createElement(_Button, {\n          key: \"submit\",\n          type: \"primary\",\n          onClick: () => {\n            this.save(2);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }, \"\\u4FDD\\u5B58\")],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(_Form, Object.assign({}, formItemLayout, {\n        className: \"editNotice-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }), React.createElement(_Form.Item, {\n        className: \"editNotice-form-item\",\n        label: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, \"\\u6807\\u9898\\xA0\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, getFieldDecorator(\"title\", {\n        rules: [{\n          required: true,\n          message: \"请输入标题\",\n          whitespace: true\n        }],\n        initialValue: record.title\n      })(React.createElement(_Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        className: \"editNotice-form-item\",\n        label: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }, \"\\u6D88\\u606F\\u5185\\u5BB9\\xA0\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, getFieldDecorator(\"content\", {\n        rules: [{\n          required: true,\n          message: \"请输入消息内容\",\n          whitespace: true\n        }],\n        initialValue: record.content\n      })(React.createElement(TextArea, {\n        className: \"editNotice-form-item-textarea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      })))))));\n    };\n\n    this.componentDidMount = async () => {\n      await this.getData();\n    };\n\n    this.getData = async () => {\n      let res;\n      this.setState({\n        spin: true\n      });\n\n      try {\n        res = await http().getTable({\n          resid: noticeId\n        }); // if(res.data.error === 0){\n\n        this.setState({\n          data: res.data.data\n        }); // }\n      } catch (error) {}\n\n      this.setState({\n        spin: false\n      });\n    };\n\n    this.onAdd = () => {\n      this.setState({\n        // page: \"addPage\",\n        visible: true\n      });\n    };\n\n    this.onBack = () => {\n      this.setState({\n        page: \"listPage\"\n      });\n    };\n\n    this.onEdit = record => {\n      this.setState({\n        editVisible: true,\n        record\n      });\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          data = _this$state2.data,\n          record = _this$state2.record,\n          page = _this$state2.page;\n    return this.renderContent();\n  }\n\n}\n\nexport default _Form.create()(EditNotice);","map":{"version":3,"sources":["/Users/mac/Desktop/IBDRegister/src/components/busniess/EditNotice/EditNotice.js"],"names":["React","Component","ApplyDataBase","http","TextArea","noticeId","formItemLayout","labelCol","xs","span","sm","wrapperCol","columns","props","onEdit","title","dataIndex","key","render","text","record","console","log","EditNotice","state","data","page","spin","visible","editVisible","handleCancel","setState","save","e","type","form","validateFieldsAndScroll","err","values","onSubmit","res","addRecords","resid","success","getData","error","message","REC_ID","modifyRecords","publish","renderContent","renderListPage","renderAddPage","renderCheckPage","getFieldDecorator","onAdd","handleOk","rules","required","whitespace","initialValue","content","componentDidMount","getTable","onBack","create"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  List,\n  Tag,\n  Divider,\n  Table,\n  message,\n  Popconfirm,\n  Button,\n  Form,\n  Input,\n  Spin,\n  Modal\n} from \"antd\";\nimport \"./EditNotice.less\";\nimport ApplyDataBase from \"../ApplyDataBase\";\nimport http from \"../../../utils/api\";\nimport TextArea from \"antd/lib/input/TextArea\";\nconst noticeId = \"620317621824\";\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 }\n  }\n};\nconst columns = props => {\n  const { onEdit } = props;\n  return [\n    {\n      title: \"序号\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"标题\",\n      dataIndex: \"title\",\n      key: \"title\",\n      render: text => <a>{text}</a>\n    },\n    {\n      title: \"消息内容\",\n      dataIndex: \"content\",\n      key: \"content\"\n    },\n    {\n      title: \"发布者\",\n      dataIndex: \"doctor\",\n      key: \"doctor\"\n    },\n    {\n      title: \"文件\",\n      dataIndex: \"file\",\n      key: \"file\"\n    },\n    {\n      title: \"状态\",\n      dataIndex: \"status\",\n      key: \"status\"\n    },\n    {\n      title: \"操作\",\n      key: \"action\",\n      render: (text, record) => (\n        <span>\n          <a\n            onClick={() => {\n              console.log(\"re\", record);\n              onEdit(record);\n            }}\n          >\n            修改\n          </a>\n          <Divider type=\"vertical\" />\n          <a>发布</a>\n        </span>\n      )\n    }\n  ];\n};\n\nclass EditNotice extends React.Component {\n  state = {\n    data: [],\n    record: {},\n    page: \"listPage\", //当前页面\n    spin: false, //是否显示加载\n    visible: false, //是否显示添加模态框\n    editVisible: false //是否显示查看模态框\n  };\n  handleCancel = () => {\n    this.setState({\n      visible: false,\n      editVisible: false\n    });\n  };\n  save = async (e, type) => {\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.onSubmit(values, type);\n      }\n    });\n  };\n  onSubmit = async (values, type) => {\n    let res;\n    if (type === 1) {\n      let data = [values];\n      try {\n        res = await http().addRecords({\n          resid: noticeId,\n          data\n        });\n        if(res.data.data === 0){\n          message.success(\"添加成功\")\n          this.setState({\n            visible: false\n          });\n        }\n        await this.getData();\n      } catch (error) {\n        message.error(error.message);\n      }\n    } else {\n      let data = [{ ...values, REC_ID: this.state.record.REC_ID }];\n      try {\n        res = await http().modifyRecords({\n          resid: noticeId,\n          data\n        });\n        if (res.data.error === 0) {\n          message.success(\"修改成功\");\n          this.setState({\n            editVisible: false\n          });\n        }\n        await this.getData();\n      } catch (error) {\n        message.error(error.message);\n      }\n    }\n  };\n\n  publish = () => {\n    this.setState({\n      page: \"listPage\"\n    });\n  };\n  renderContent = () => {\n    let page = this.state.page;\n    switch (page) {\n      case \"listPage\":\n        return this.renderListPage();\n      case \"addPage\":\n        return this.renderAddPage();\n      case \"checkPage\":\n        return this.renderCheckPage();\n    }\n  };\n  renderListPage = () => {\n    let data = this.state.data;\n    let { spin, record } = this.state;\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <div className=\"editNotice\">\n        <Button type=\"primary\" className=\"editNotice-add\" onClick={this.onAdd}>\n          添加新通知\n        </Button>\n        <Spin spinning={spin}>\n          <Table\n            className=\"editNotice-table\"\n            columns={columns({\n              onEdit: record => {\n                this.onEdit(record);\n              }\n            })}\n            dataSource={data}\n          />\n          <Modal\n            title=\"添加新通知\"\n            visible={this.state.visible}\n            width={700}\n            onOk={this.handleOk}\n            onCancel={this.handleCancel}\n            destroyOnClose={true}\n            footer={[\n              <Button key=\"back\" onClick={this.handleCancel}>\n                取消\n              </Button>,\n              <Button key=\"submit\" type=\"primary\" onClick={()=>{\n                this.save(1)\n              }}>\n                保存\n              </Button>,\n              <Button key=\"submit\" type=\"primary\" onClick={this.publish}>\n                发布\n              </Button>\n            ]}\n          >\n            <Form {...formItemLayout} className=\"editNotice-form\">\n              {/* <h1>消息编辑</h1> */}\n              <Form.Item\n                className=\"editNotice-form-item\"\n                label={<span>标题&nbsp;</span>}\n              >\n                {getFieldDecorator(\"title\", {\n                  rules: [\n                    {\n                      required: true,\n                      message: \"请输入标题\",\n                      whitespace: true\n                    }\n                  ]\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item\n                className=\"editNotice-form-item\"\n                label={<span>消息内容&nbsp;</span>}\n              >\n                {getFieldDecorator(\"content\", {\n                  rules: [\n                    {\n                      required: true,\n                      message: \"请输入消息内容\",\n                      whitespace: true\n                    }\n                  ]\n                })(<TextArea className=\"editNotice-form-item-textarea\" />)}\n              </Form.Item>\n              {/* <div className=\"editNotice-form-btns\">\n            <Button type=\"primary\" htmlType=\"submit\" onClick={this.save}>\n              保存\n            </Button>\n            <Button type=\"primary\" htmlType=\"submit\" onClick={this.publish}>\n              发布\n            </Button>\n          </div> */}\n            </Form>\n          </Modal>\n          <Modal\n            title=\"修改通知\"\n            visible={this.state.editVisible}\n            width={700}\n            onOk={this.handleOk}\n            onCancel={this.handleCancel}\n            destroyOnClose={true}\n            footer={[\n              <Button key=\"back\" onClick={this.handleCancel}>\n                取消\n              </Button>,\n              <Button\n                key=\"submit\"\n                type=\"primary\"\n                onClick={() => {\n                  this.save(2);\n                }}\n              >\n                保存\n              </Button>\n            ]}\n          >\n            <Form {...formItemLayout} className=\"editNotice-form\">\n              {/* <h1>消息编辑</h1> */}\n              <Form.Item\n                className=\"editNotice-form-item\"\n                label={<span>标题&nbsp;</span>}\n              >\n                {getFieldDecorator(\"title\", {\n                  rules: [\n                    {\n                      required: true,\n                      message: \"请输入标题\",\n                      whitespace: true\n                    }\n                  ],\n                  initialValue: record.title\n                })(<Input />)}\n              </Form.Item>\n              <Form.Item\n                className=\"editNotice-form-item\"\n                label={<span>消息内容&nbsp;</span>}\n              >\n                {getFieldDecorator(\"content\", {\n                  rules: [\n                    {\n                      required: true,\n                      message: \"请输入消息内容\",\n                      whitespace: true\n                    }\n                  ],\n                  initialValue: record.content\n                })(<TextArea className=\"editNotice-form-item-textarea\" />)}\n              </Form.Item>\n            </Form>\n          </Modal>\n        </Spin>\n      </div>\n    );\n  };\n  // renderCheckPage = () => {\n  //   const { getFieldDecorator } = this.props.form;\n  //   let record = this.state.record;\n  //   return (\n  //     <div className=\"editNotice\">\n  //       <Button type=\"primary\" className=\"editNotice-add\" onClick={this.onBack}>\n  //         返回\n  //       </Button>\n\n  //     </div>\n  //   );\n  // };\n  // renderAddPage = () => {\n  //   const { getFieldDecorator } = this.props.form;\n  //   return (\n  //     <div className=\"editNotice\">\n  //       <Button type=\"primary\" className=\"editNotice-add\" onClick={this.onBack}>\n  //         返回\n  //       </Button>\n\n  //     </div>\n  //   );\n  // };\n  componentDidMount = async () => {\n    await this.getData();\n  };\n  getData = async () => {\n    let res;\n    this.setState({\n      spin: true\n    });\n    try {\n      res = await http().getTable({\n        resid: noticeId\n      });\n      // if(res.data.error === 0){\n      this.setState({\n        data: res.data.data\n      });\n      // }\n    } catch (error) {}\n    this.setState({\n      spin: false\n    });\n  };\n  onAdd = () => {\n    this.setState({\n      // page: \"addPage\",\n      visible: true\n    });\n  };\n  onBack = () => {\n    this.setState({\n      page: \"listPage\"\n    });\n  };\n  onEdit = record => {\n    this.setState({\n      editVisible: true,\n      record\n    });\n  };\n  render() {\n    const { data, record, page } = this.state;\n\n    return this.renderContent();\n  }\n}\nexport default Form.create()(EditNotice);\n"]},"metadata":{},"sourceType":"module"}